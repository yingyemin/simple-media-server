配置最大带宽

MAXBW_SET 模式：显式设置该值。推荐的默认值是 1 Gbps。默认值仅为实时流传输设置。
INPUTBW_SET 模式：设置 SRT 发送方的输入速率（INPUT_BW）和开销（OVERHEAD）。
    MAX_BW = INPUT_BW * (1 + OVERHEAD /100)
INPUTBW_ESTIMATED 模式：在内部测量 SRT 发送方的输入速率，并设置开销（OVERHEAD）。
在这种模式下，SRT 每次获取到输入速率的更新估计值 EST_INPUT_BW 时，都会
调整最大带宽的值：
    MAX_BW = EST_INPUT_BW * (1 + OVERHEAD /100)

默认的实时拥塞算法

SRT 默认的实时拥塞控制（LiveCC）算法的主要目标是，在传输过程中，根据平
均数据包有效载荷大小（AvgPayloadSize）和最大带宽（MAX_BW）来调整最小允
许的数据包发送间隔（PKT_SND_PERIOD），进而调整最大允许的发送速率。

（1）在发送数据数据包（无论是原始数据包还是重传数据包）时，更新平均数
据包有效载荷大小（AvgPayloadSize）的值：
AvgPayloadSize = 7/8 * AvgPayloadSize + 1/8 * PacketPayloadSize

（2）在接收到确认（ACK）数据包时：
步骤 1. 计算 SRT 数据包大小（PktSize），它是平均有效载荷大小
（AvgPayloadSize）与 SRT 包头大小（第 3 节）之和，单位为字节。
步骤 2. 计算最小允许的数据包发送间隔（PKT_SND_PERIOD），公式如下：
PKT_SND_PERIOD = PktSize * 1000000 / MAX_BW
其中，MAX_BW 是配置的最大带宽，用于限制 SRT 的带宽使用，单位为字节每秒；
PKT_SND_PERIOD 的单位为微秒。

RTO 是指在发送数据数据包后，预期收到确认的时间长度。如果在这段时间过去
后仍没有收到 ACK，则会触发超时事件。由于 SRT 仅在每个同步时间（SYN）间
隔（4.8.1 节）进行一次确认，重传超时的值定义如下：
RTO = RTT + 4 * RTTVar + 2 * SYN
其中，RTT 是往返时间估计值，单位为微秒；RTTVar 是往返时间估计值的方差，
单位为微秒，由接收方报告并在发送方进行平滑处理（见 3.2.4 节、4.10 节）。
在本节及后续内容中，“平滑处理” 指的是应用指数加权移动平均（EWMA）。
连续的超时情况应增加 RTO 的值。在 SRT 中，使用一个计数器（RexmitCount）
来跟踪连续超时的次数：
RTO = RexmitCount * (RTT + 4 * RTTVar + 2 * SYN) + SYN
在接收方，当发送丢失报告时，定期否定确认（NAK）报告的发送间隔（4.8.2 节）
将按如下方式更新：
NAKInterval = max ((RTT + 4 * RTTVar) / 2, 20000)
其中，RTT 和 RTTVar 是接收方的估计值（见 3.2.4 节、4.10 节）。NAKInterval
的最小值设置为 20 毫秒，以避免在低延迟条件下过于频繁地发送定期 NAK 报
告。

SRT 中的往返时间（RTT）是在数据数据包传输期间，根据 SRT 接收方发送 ACK
数据包与接收到相应的 ACKACK 数据包之间的时间差来估计的
在下面的公式中，RTT 是接收方维护的当前值，rtt 是刚刚根据一对 ACK/ACKACK 计
算出的最新值：
RTT = 7/8 * RTT + 1/8 * rtt
 RTT 方差（RTTVar）按如下方式获得：
RTTVar = 3/4 * RTTVar + 1/4 * abs(RTT- rtt)
其中 abs () 表示绝对值。
RTT 和 RTTVar 都是以微秒为单位进行测量的。RTT 的初始值是 100 毫秒，
RTTVar 的初始值是 50 毫秒。
接收方计算出的往返时间（RTT）以及 RTT 方差（RTTVar）会随下一个完整的确
认数据包一起发送（见 3.2.4 节）。请注意，SRT 会话中的第一个 ACK 可能包
含 100 毫秒的初始 RTT 值，因为早期的计算可能不够精确。
发送方总是从接收方获取 RTT 值。它没有类似于 ACK/ACKACK 的机制，也就是
说，它不能发送一个保证无处理延迟立即返回的消息。在接收到 ACK 时，SRT 发
送方使用上述相同的公式更新自己的 RTT 和 RTTVar 值，在这种情况下，rtt 是
它接收到的最新值，即由传入的 ACK 携带的值。

SRT 定期 NAK 报告以（RTT + 4 * RTTVar）/ 2（所谓的 NAKInterval）的周期
发送，下限为 20 毫秒
SRT 接收方发送 NAK 控制数据包来通知发送方有关丢失的数据包。在检测到数
据数据包序列号出现间隙后，可以立即触发 NAK 数据包的发送。

完整的 ACK 基于 10 毫秒的定时器（ACK 周期或同步时
间间隔 SYN）。对于高比特率传输，可以发送一个 “轻量级 ACK”，这是对一
系列数据包的确认。在 10 毫秒的间隔内，经常会有很多数据包被发送和接收，
以至于发送方的 ACK 位置推进得不够快。为了缓解这个问题，在发送和接收 64
个数据包之后（即使 ACK 周期还没有完全结束），接收方会发送一个轻量级 ACK。
轻量级 ACK 是一个更短的 ACK（SRT 包头和一个 32 位字段）。它不会触发
ACKACK

当启用 TLPKTDROP 机制时，如果数据包的时间戳早于 TLPKTDROP_THRESHOLD，
那么该数据包将被认为 “过迟” 而无法交付，并且可能会被发送方丢弃。
TLPKTDROP_THRESHOLD 与 SRT 延迟（4.4 节）相关。为了使过迟数据包丢弃机
制有效地发挥作用，建议使用一个高于 SRT 延迟的值。这将允许 SRT 接收方首
先丢弃丢失的数据包，而发送方在没有及时从对等方收到适当响应的情况下（例
如，由于严重拥塞）丢弃数据包。建议的阈值为 SRT 延迟值的 1.25 倍。
请注意，如果延迟对于较大的往返时间（RTT）来说不够高（即，如果
TLPKTDROP_THRESHOLD 小于 1 秒），SRT 发送方会将数据包保留至少 1 秒。

在接收到第二次握手请求的时刻，按如下方式计算 TSBPD 时间基准
（TsbpdTimeBase）的初始值：
TsbpdTimeBase = T_NOW- HSREQ_TIMESTAMP
其中 T_NOW 是根据接收方时钟的当前时间；HSREQ_TIMESTAMP 是握手数据包的
时间戳，单位为微秒。
TSBPD 回绕周期在达到数据包的最大时间戳值前 30 秒开始，并且一旦交付（从缓冲区读
取）时间戳在（30，60）秒区间内的数据包就结束。TsbpdTimeBase 的更新值将
按如下方式重新计算：
TsbpdTimeBase = TsbpdTimeBase + MAX_TIMESTAMP + 1

数据包交付时间是指接收方估计的、数据包应该交付给上游应用程序的时刻。在
接收到数据数据包时，根据以下公式计算数据包交付时间（PktTsbpdTime）：
PktTsbpdTime = TsbpdTimeBase + PKT_TIMESTAMP + TsbpdDelay + Drift
其中：
TsbpdTimeBase 是时间基准，反映了接收方本地时钟与发送方用于给正在发送的
数据包打时间戳的时钟之间的时间差（见 4.5.1.1 节）；
PKT_TIMESTAMP 是数据数据包的时间戳，单位为微秒；
TsbpdDelay 是接收方的缓冲区延迟（或接收方的缓冲区延迟时间，或 SRT 延
迟）。
Drift 是用于调整发送方和接收方时钟之间波动的时间漂移量，单位为微秒。
SRT 延迟（TsbpdDelay）应该是一个足够大的缓冲时间，以覆盖意外延长的往返
时间（RTT），以及重传丢失数据包所需的时间。最小的 TsbpdDelay 值在 SRT 握
手交换期间协商确定，等于 120 毫秒。建议的 TsbpdDelay 值是往返时间（RTT）
的 3 到 4 倍。